name: Delete old container images

on: workflow_dispatch

permissions:
  contents: read

jobs:
  build-containers:
    permissions:
      packages: write
      id-token: write
    name: Build a few images
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/sredevopsorg/ghcr-retention-policy-test
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          persist-credentials: false
      
      - uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Each build should be different because of the $RANDOM addition
      - name: Build latest
        run: |
          randomString=$(LC_ALL=C tr -dc A-Za-z </dev/urandom | head -c 10)
          echo "FROM scratch as $randomString" > Dockerfile.test
          cat Dockerfile.test
          docker buildx build . -f Dockerfile.test -t "${{ env.IMAGE }}:latest" --cache-to=type=inline --cache-from="ghcr.io/sredevopsorg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: |
          randomString=$(LC_ALL=C tr -dc A-Za-z </dev/urandom | head -c 11)
          echo "FROM scratch as $randomString" > Dockerfile.test
          cat Dockerfile.test
          docker buildx build . -f Dockerfile.test -t "${{ env.IMAGE }}:latest" --cache-to=type=inline --cache-from="ghcr.io/sredevopsorg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: |
          randomString=$(LC_ALL=C tr -dc A-Za-z </dev/urandom | head -c 12)
          echo "FROM scratch as $randomString" > Dockerfile.test
          cat Dockerfile.test
          docker buildx build . -f Dockerfile.test -t "${{ env.IMAGE }}:latest" --cache-to=type=inline --cache-from="ghcr.io/sredevopsorg/ghcr-retention-policy-test:latest" --push
      - name: Build latest
        run: |
          randomString=$(LC_ALL=C tr -dc A-Za-z </dev/urandom | head -c 13)
          echo "FROM scratch as $randomString" > Dockerfile.test
          cat Dockerfile.test
          docker buildx build . -f Dockerfile.test -t "${{ env.IMAGE }}:latest" --cache-to=type=inline --cache-from="ghcr.io/sredevopsorg/ghcr-retention-policy-test:latest" --push

  clean-ghcr:
    needs: build-containers
    name: Then delete them
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - name: Cache image versions to skip
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: cache
        with:
          path: skip-image-versions.txt
          # key will always *not* match for a new commit, but
          # restore-key will match if there's a previously stored
          # file; so cache will *both be loaded and stored*.
          key: image-versions-to-skip-${{ github.sha }}
          restore-keys: image-versions-to-skip

      - name: Create file if it doesn't exist
        run: touch skip-image-versions.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Set image-versions output
        id: image-version
        run: |
          images="$(cat skip-image-versions.txt)"
          echo $images
          echo "image-versions=$images" >> $GITHUB_OUTPUT

      - name: Delete images more than 2 seconds old
        uses: sredevopsorg/container-retention-policy@ca66e010287d14b9b60bfec0f8a2ba6ce8776d4f # main
        id: delete-images
        continue-on-error: true
        with:
          image-names: ghcr-retention-policy-test
          cut-off: 2 seconds ago UTC+0
          account-type: org
          org-name: sredevopsorg
          token: ${{ github.token }}
          skip-tags: ${{ steps.image-version.outputs.image-versions }}
        

      - name: Write skipped tags to cache
        run: |
          echo "${{ steps.delete-images.outputs.failed }}" > skip-image-versions.txt
